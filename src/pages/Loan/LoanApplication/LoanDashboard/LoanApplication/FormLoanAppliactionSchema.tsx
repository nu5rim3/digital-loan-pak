import * as yup from 'yup'

export const schema = yup.object().shape({
    profession: yup.string().required('Profession is required'),
    sourceOfIncome: yup.string().required('Source of Income is required'),
    purposeOfLoan: yup.string().required('Purpose of Loan is required'),
    repeatCustomer: yup.string().required('Repeat Customer status is required'),
    bnsName: yup.string().when('sourceOfIncome', {
        is: 'Business Income',
        then: (schema) => schema.required('Business Name is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    natureOfBns: yup.string().when('sourceOfIncome', {
        is: 'Business Income',
        then: (schema) => schema.required('Nature of Business is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    bnsAddress: yup.string().when('sourceOfIncome', {
        is: 'Business Income',
        then: (schema) => schema.required('Business Address is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    phoneNo: yup.string().when('sourceOfIncome', {
        is: 'Business Income',
        then: (schema) => schema.required('Phone Number is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    description: yup.string().when('sourceOfIncome', {
        is: 'Business Income',
        then: (schema) => schema.required('Description is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    prevExpInBns: yup.string().when('sourceOfIncome', {
        is: 'Business Income',
        then: (schema) => schema.required('Previous Experience in Business is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    ownOfBnsPlace: yup.string().when('sourceOfIncome', {
        is: 'Business Income',
        then: (schema) => schema.required('Ownership of Business Place is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    costOfBns: yup.string().when('sourceOfIncome', {
        is: 'Business Income',
        then: (schema) => schema.required('Cost of Business is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    bnsRatings: yup.string().when('sourceOfIncome', {
        is: 'Business Income',
        then: (schema) => schema.required('Business Ratings is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    borrowerDistrict: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Borrower District is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    acresOwned: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Acres Owned is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    acresRented: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Acres Rented is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    acresTotal: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Total Acres is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    sowodo: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Sowodo is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    loanTenure: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Loan Tenure is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    insCompany: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Insurance Company is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    policyIssuedDate: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Policy Issued Date is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    policyExpiredDate: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Policy Expired Date is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    receiptNo: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Receipt Number is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    premiumRate: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Premium Rate is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    animalOrCrop: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Animal or Crop is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    buffaloes: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Number of Buffaloes is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    cows: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Number of Cows is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    bulls: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Number of Bulls is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    collateral: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Collateral is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    claimLodged: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Claim Lodged is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    animalTagging: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Animal Tagging is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    natureOfTheBorrower: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Nature of the Borrower is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    ownOfLand: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Ownership of Land is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    floodsFactor: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Floods Factor is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    irrigation: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Irrigation is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    methods: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Methods is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    proofOfCult: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Proof of Cultivation is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    expInCult: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Experience in Cultivation is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    agriSecured: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Agricultural Secured is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    marketCheck: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Market Check is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    rabiCrop: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Rabi Crop is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    acresOfRabi: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Acres of Rabi is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    rabiHarvestingDate: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Rabi Harvesting Date is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    rabiCultivationDate: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Rabi Cultivation Date is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    kharifCrop: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Kharif Crop is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    acresOfKharif: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Acres of Kharif is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    kharifHarvestingDate: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Kharif Harvesting Date is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    kharifCultivationDate: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Kharif Cultivation Date is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    khasra: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Khasra is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    khewat: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Khewat is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    khtoni: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Khtoni is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    ownLandLoc: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Owner Land Location is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    rentedLandLoc: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Rented Land Location is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    district: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('District is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    ownName: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Owner Name is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    ownCNIC: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Owner CNIC is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    ownAddress: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Owner Address is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    ownContact: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Owner Contact is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    cropsToBeCult: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Crops to be Cultivated is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    cropsName: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Crops Name is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    landDetails: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Land Details are required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    comment: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Comment is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    loanLimitRabi: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Loan Limit for Rabi is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    loanLimitKharif: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Loan Limit for Kharif is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    loanLimitTotal: yup.string().when('sourceOfIncome', {
        is: 'Agricultural Income',
        then: (schema) => schema.required('Total Loan Limit is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    employer: yup.string().when('sourceOfIncome', {
        is: 'Salary Income',
        then: (schema) => schema.required('Employer is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    typeOfBusiness: yup.string().when('sourceOfIncome', {
        is: 'Salary Income',
        then: (schema) => schema.required('Type of Business is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    designation: yup.string().when('sourceOfIncome', {
        is: 'Salary Income',
        then: (schema) => schema.required('Designation is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    currEmpPeriod: yup.string().when('sourceOfIncome', {
        is: 'Salary Income',
        then: (schema) => schema.required('Current Employment Period is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    empAddress: yup.string().when('sourceOfIncome', {
        is: 'Salary Income',
        then: (schema) => schema.required('Employment Address is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    typeOfJob: yup.string().when('sourceOfIncome', {
        is: 'Salary Income',
        then: (schema) => schema.required('Type of Job is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    natureOfEmp: yup.string().when('sourceOfIncome', {
        is: 'Salary Income',
        then: (schema) => schema.required('Nature of Employment is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    contactNo: yup.string().when('sourceOfIncome', {
        is: 'Salary Income',
        then: (schema) => schema.required('Contact Number is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    residenceOrWorking: yup.string().when('sourceOfIncome', {
        is: 'Salary Income',
        then: (schema) => schema.required('Residence or Working Place is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
    proofOfSalary: yup.string().when('sourceOfIncome', {
        is: 'Salary Income',
        then: (schema) => schema.required('Proof of Salary is required'),
        otherwise: (schema) => schema.notRequired(),
    }),
})

// "profession": "Salaried",
// "sourceOfIncome": "Salary income",
// "purposeOfLoan": "5",
// "employer": "Salary income",
// "typeOfBusiness": "typeOfBusiness",
// "designation": "designation",
// "currEmpPeriod": "12y",
// "empAddress": "245,Rajagiriya",
// "typeOfJob": "Privatee",
// "natureOfEmp": "Permanet",
// "contactNo": "0715756956",
// "residenceOrWorking":"Residence or working place of applicant",
// "proofOfSalary":"3 months bank statement provided",
// "repeatCustomer":"New customer/Average 15 days delay"

// "appraisalId": "AP000000000001",
// "idx": "LSTK0000000002341",
// "profession": "Salaried",
// "sourceOfIncome": "Salary income",
// "borrowerDistrict": "s",
// "sowodo": "ss",
// "loanTenure": "s",
// "insCompany": "s",
// "policyIssuedDate": "2022-01-01T00:00:00.000+00:00",
// "policyExpiredDate": "2022-01-01T00:00:00.000+00:00",
// "receiptNo": "s",
// "premiumRate": "s",
// "animalOrCrop": "s",
// "buffaloes": "s",
// "cows": "s",
// "bulls": "s",
// "collateral": "s",
// "claimLodged": "s",
// "animalTagging": "s",
// "purposeOfLoan": "s",
// "natureOfTheBorrower": "s",
// "ownOfLand": "",
// "floodsFactor": "",
// "irrigation": "",
// "methods": "",
// "proofOfCult": "",
// "expInCult": "",
// "agriSecured": "",
// "marketCheck": "Mssss",
// "status": "A"

// { label: 'Salary Income', value: 'Salary Income' },
// { label: 'Rental Income', value: 'Rental Income' },
// { label: 'Business Income', value: 'Business Income' },
// { label: 'Agricultural Income', value: 'Agricultural Income' },
// { label: 'Live Stock Income', value: 'Live Stock Income' }